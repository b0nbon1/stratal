// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: jobs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (id, user_id, name, description, source, raw_payload)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, name, description, source, created_at
`

type CreateJobParams struct {
	ID          pgtype.UUID `json:"id"`
	UserID      pgtype.UUID `json:"user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Source      string      `json:"source"`
	RawPayload  []byte      `json:"raw_payload"`
}

type CreateJobRow struct {
	ID          pgtype.UUID        `json:"id"`
	UserID      pgtype.UUID        `json:"user_id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	Source      string             `json:"source"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (CreateJobRow, error) {
	row := q.db.QueryRow(ctx, createJob,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Source,
		arg.RawPayload,
	)
	var i CreateJobRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Source,
		&i.CreatedAt,
	)
	return i, err
}

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs
WHERE id = $1
`

func (q *Queries) DeleteJob(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteJob, id)
	return err
}

const getJob = `-- name: GetJob :one
SELECT id, user_id, name, description, source, created_at FROM jobs
WHERE id = $1 LIMIT 1
`

type GetJobRow struct {
	ID          pgtype.UUID        `json:"id"`
	UserID      pgtype.UUID        `json:"user_id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	Source      string             `json:"source"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetJob(ctx context.Context, id pgtype.UUID) (GetJobRow, error) {
	row := q.db.QueryRow(ctx, getJob, id)
	var i GetJobRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Source,
		&i.CreatedAt,
	)
	return i, err
}

const updateJob = `-- name: UpdateJob :exec
UPDATE jobs
SET name = $2, description = $3, source = $4, raw_payload = $5, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateJobParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Source      string      `json:"source"`
	RawPayload  []byte      `json:"raw_payload"`
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) error {
	_, err := q.db.Exec(ctx, updateJob,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Source,
		arg.RawPayload,
	)
	return err
}
