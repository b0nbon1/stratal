// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: secrets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSecret = `-- name: CreateSecret :one
INSERT INTO secrets (user_id, name, encrypted_value)
VALUES ($1, $2, $3)
RETURNING id, user_id, name, created_at
`

type CreateSecretParams struct {
	UserID         pgtype.UUID `json:"user_id"`
	Name           string      `json:"name"`
	EncryptedValue string      `json:"encrypted_value"`
}

type CreateSecretRow struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    pgtype.UUID        `json:"user_id"`
	Name      string             `json:"name"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateSecret(ctx context.Context, arg CreateSecretParams) (CreateSecretRow, error) {
	row := q.db.QueryRow(ctx, createSecret, arg.UserID, arg.Name, arg.EncryptedValue)
	var i CreateSecretRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSecret = `-- name: DeleteSecret :exec
DELETE FROM secrets
WHERE id = $1 AND user_id = $2
`

type DeleteSecretParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteSecret(ctx context.Context, arg DeleteSecretParams) error {
	_, err := q.db.Exec(ctx, deleteSecret, arg.ID, arg.UserID)
	return err
}

const getSecret = `-- name: GetSecret :one
SELECT id, user_id, name, encrypted_value, created_at
FROM secrets
WHERE id = $1 AND user_id = $2 LIMIT 1
`

type GetSecretParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

type GetSecretRow struct {
	ID             pgtype.UUID        `json:"id"`
	UserID         pgtype.UUID        `json:"user_id"`
	Name           string             `json:"name"`
	EncryptedValue string             `json:"encrypted_value"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetSecret(ctx context.Context, arg GetSecretParams) (GetSecretRow, error) {
	row := q.db.QueryRow(ctx, getSecret, arg.ID, arg.UserID)
	var i GetSecretRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.EncryptedValue,
		&i.CreatedAt,
	)
	return i, err
}

const getSecretByName = `-- name: GetSecretByName :one
SELECT id, user_id, name, encrypted_value, created_at
FROM secrets
WHERE name = $1 AND user_id = $2 LIMIT 1
`

type GetSecretByNameParams struct {
	Name   string      `json:"name"`
	UserID pgtype.UUID `json:"user_id"`
}

type GetSecretByNameRow struct {
	ID             pgtype.UUID        `json:"id"`
	UserID         pgtype.UUID        `json:"user_id"`
	Name           string             `json:"name"`
	EncryptedValue string             `json:"encrypted_value"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetSecretByName(ctx context.Context, arg GetSecretByNameParams) (GetSecretByNameRow, error) {
	row := q.db.QueryRow(ctx, getSecretByName, arg.Name, arg.UserID)
	var i GetSecretByNameRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.EncryptedValue,
		&i.CreatedAt,
	)
	return i, err
}

const listSecrets = `-- name: ListSecrets :many
SELECT id, user_id, name, created_at
FROM secrets
WHERE user_id = $1
ORDER BY created_at DESC
`

type ListSecretsRow struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    pgtype.UUID        `json:"user_id"`
	Name      string             `json:"name"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListSecrets(ctx context.Context, userID pgtype.UUID) ([]ListSecretsRow, error) {
	rows, err := q.db.Query(ctx, listSecrets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSecretsRow{}
	for rows.Next() {
		var i ListSecretsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSecret = `-- name: UpdateSecret :exec
UPDATE secrets
SET encrypted_value = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $3
`

type UpdateSecretParams struct {
	ID             pgtype.UUID `json:"id"`
	EncryptedValue string      `json:"encrypted_value"`
	UserID         pgtype.UUID `json:"user_id"`
}

func (q *Queries) UpdateSecret(ctx context.Context, arg UpdateSecretParams) error {
	_, err := q.db.Exec(ctx, updateSecret, arg.ID, arg.EncryptedValue, arg.UserID)
	return err
}
