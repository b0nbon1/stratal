// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package db

import (
	"context"

	dto "github.com/b0nbon1/stratal/internal/storage/db/dto"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBulkTasks = `-- name: CreateBulkTasks :many
INSERT INTO tasks (id, job_id, name, type, config, "order")
VALUES
    ($1, $2, $3, $4, $5, $6),
    ($7, $8, $9, $10, $11, $12)
RETURNING id, job_id, name, type, config, "order", created_at
`

type CreateBulkTasksParams struct {
	ID       pgtype.UUID    `json:"id"`
	JobID    pgtype.UUID    `json:"job_id"`
	Name     string         `json:"name"`
	Type     string         `json:"type"`
	Config   dto.TaskConfig `json:"config"`
	Order    int32          `json:"order"`
	ID_2     pgtype.UUID    `json:"id_2"`
	JobID_2  pgtype.UUID    `json:"job_id_2"`
	Name_2   string         `json:"name_2"`
	Type_2   string         `json:"type_2"`
	Config_2 dto.TaskConfig `json:"config_2"`
	Order_2  int32          `json:"order_2"`
}

type CreateBulkTasksRow struct {
	ID        pgtype.UUID        `json:"id"`
	JobID     pgtype.UUID        `json:"job_id"`
	Name      string             `json:"name"`
	Type      string             `json:"type"`
	Config    dto.TaskConfig     `json:"config"`
	Order     int32              `json:"order"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateBulkTasks(ctx context.Context, arg CreateBulkTasksParams) ([]CreateBulkTasksRow, error) {
	rows, err := q.db.Query(ctx, createBulkTasks,
		arg.ID,
		arg.JobID,
		arg.Name,
		arg.Type,
		arg.Config,
		arg.Order,
		arg.ID_2,
		arg.JobID_2,
		arg.Name_2,
		arg.Type_2,
		arg.Config_2,
		arg.Order_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CreateBulkTasksRow{}
	for rows.Next() {
		var i CreateBulkTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Name,
			&i.Type,
			&i.Config,
			&i.Order,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (job_id, name, type, config, "order")
VALUES ($1, $2, $3, $4, $5)
RETURNING id, job_id, name, type, config, "order", created_at
`

type CreateTaskParams struct {
	JobID  pgtype.UUID    `json:"job_id"`
	Name   string         `json:"name"`
	Type   string         `json:"type"`
	Config dto.TaskConfig `json:"config"`
	Order  int32          `json:"order"`
}

type CreateTaskRow struct {
	ID        pgtype.UUID        `json:"id"`
	JobID     pgtype.UUID        `json:"job_id"`
	Name      string             `json:"name"`
	Type      string             `json:"type"`
	Config    dto.TaskConfig     `json:"config"`
	Order     int32              `json:"order"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (CreateTaskRow, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.JobID,
		arg.Name,
		arg.Type,
		arg.Config,
		arg.Order,
	)
	var i CreateTaskRow
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.Order,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, job_id, name, type, config, "order", created_at
FROM tasks
WHERE id = $1 LIMIT 1
`

type GetTaskRow struct {
	ID        pgtype.UUID        `json:"id"`
	JobID     pgtype.UUID        `json:"job_id"`
	Name      string             `json:"name"`
	Type      string             `json:"type"`
	Config    dto.TaskConfig     `json:"config"`
	Order     int32              `json:"order"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetTask(ctx context.Context, id pgtype.UUID) (GetTaskRow, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i GetTaskRow
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.Order,
		&i.CreatedAt,
	)
	return i, err
}

const getTasksByJobID = `-- name: GetTasksByJobID :many
SELECT id, job_id, name, type
FROM tasks
WHERE job_id = $1
ORDER BY "order"
`

type GetTasksByJobIDRow struct {
	ID    pgtype.UUID `json:"id"`
	JobID pgtype.UUID `json:"job_id"`
	Name  string      `json:"name"`
	Type  string      `json:"type"`
}

func (q *Queries) GetTasksByJobID(ctx context.Context, jobID pgtype.UUID) ([]GetTasksByJobIDRow, error) {
	rows, err := q.db.Query(ctx, getTasksByJobID, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTasksByJobIDRow{}
	for rows.Next() {
		var i GetTasksByJobIDRow
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Name,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, job_id, name, type, config, "order", created_at
FROM tasks
WHERE job_id = $1
ORDER BY "order"
`

type ListTasksRow struct {
	ID        pgtype.UUID        `json:"id"`
	JobID     pgtype.UUID        `json:"job_id"`
	Name      string             `json:"name"`
	Type      string             `json:"type"`
	Config    dto.TaskConfig     `json:"config"`
	Order     int32              `json:"order"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListTasks(ctx context.Context, jobID pgtype.UUID) ([]ListTasksRow, error) {
	rows, err := q.db.Query(ctx, listTasks, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTasksRow{}
	for rows.Next() {
		var i ListTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Name,
			&i.Type,
			&i.Config,
			&i.Order,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET name = $2, type = $3, config = $4, "order" = $5, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateTaskParams struct {
	ID     pgtype.UUID    `json:"id"`
	Name   string         `json:"name"`
	Type   string         `json:"type"`
	Config dto.TaskConfig `json:"config"`
	Order  int32          `json:"order"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.Exec(ctx, updateTask,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.Config,
		arg.Order,
	)
	return err
}
