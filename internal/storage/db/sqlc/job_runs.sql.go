// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job_runs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJobRun = `-- name: CreateJobRun :one
INSERT INTO job_runs (id, job_id, status, started_at, finished_at, error_message, triggered_by, metadata)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, job_id, status, started_at, finished_at, error_message, triggered_by, metadata, created_at
`

type CreateJobRunParams struct {
	ID           pgtype.UUID      `json:"id"`
	JobID        pgtype.UUID      `json:"job_id"`
	Status       pgtype.Text      `json:"status"`
	StartedAt    pgtype.Timestamp `json:"started_at"`
	FinishedAt   pgtype.Timestamp `json:"finished_at"`
	ErrorMessage pgtype.Text      `json:"error_message"`
	TriggeredBy  pgtype.Text      `json:"triggered_by"`
	Metadata     []byte           `json:"metadata"`
}

type CreateJobRunRow struct {
	ID           pgtype.UUID        `json:"id"`
	JobID        pgtype.UUID        `json:"job_id"`
	Status       pgtype.Text        `json:"status"`
	StartedAt    pgtype.Timestamp   `json:"started_at"`
	FinishedAt   pgtype.Timestamp   `json:"finished_at"`
	ErrorMessage pgtype.Text        `json:"error_message"`
	TriggeredBy  pgtype.Text        `json:"triggered_by"`
	Metadata     []byte             `json:"metadata"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateJobRun(ctx context.Context, arg CreateJobRunParams) (CreateJobRunRow, error) {
	row := q.db.QueryRow(ctx, createJobRun,
		arg.ID,
		arg.JobID,
		arg.Status,
		arg.StartedAt,
		arg.FinishedAt,
		arg.ErrorMessage,
		arg.TriggeredBy,
		arg.Metadata,
	)
	var i CreateJobRunRow
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Status,
		&i.StartedAt,
		&i.FinishedAt,
		&i.ErrorMessage,
		&i.TriggeredBy,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const deleteJobRun = `-- name: DeleteJobRun :exec
DELETE FROM job_runs
WHERE id = $1
`

func (q *Queries) DeleteJobRun(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteJobRun, id)
	return err
}

const getJobRun = `-- name: GetJobRun :one
SELECT id, job_id, status, started_at, finished_at, error_message, triggered_by, metadata, created_at
FROM job_runs
WHERE id = $1 LIMIT 1
`

type GetJobRunRow struct {
	ID           pgtype.UUID        `json:"id"`
	JobID        pgtype.UUID        `json:"job_id"`
	Status       pgtype.Text        `json:"status"`
	StartedAt    pgtype.Timestamp   `json:"started_at"`
	FinishedAt   pgtype.Timestamp   `json:"finished_at"`
	ErrorMessage pgtype.Text        `json:"error_message"`
	TriggeredBy  pgtype.Text        `json:"triggered_by"`
	Metadata     []byte             `json:"metadata"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetJobRun(ctx context.Context, id pgtype.UUID) (GetJobRunRow, error) {
	row := q.db.QueryRow(ctx, getJobRun, id)
	var i GetJobRunRow
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Status,
		&i.StartedAt,
		&i.FinishedAt,
		&i.ErrorMessage,
		&i.TriggeredBy,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const listJobRuns = `-- name: ListJobRuns :many
SELECT id, job_id, status, started_at, finished_at, error_message, triggered_by, metadata, created_at
FROM job_runs
WHERE job_id = $1
ORDER BY created_at DESC
`

type ListJobRunsRow struct {
	ID           pgtype.UUID        `json:"id"`
	JobID        pgtype.UUID        `json:"job_id"`
	Status       pgtype.Text        `json:"status"`
	StartedAt    pgtype.Timestamp   `json:"started_at"`
	FinishedAt   pgtype.Timestamp   `json:"finished_at"`
	ErrorMessage pgtype.Text        `json:"error_message"`
	TriggeredBy  pgtype.Text        `json:"triggered_by"`
	Metadata     []byte             `json:"metadata"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListJobRuns(ctx context.Context, jobID pgtype.UUID) ([]ListJobRunsRow, error) {
	rows, err := q.db.Query(ctx, listJobRuns, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListJobRunsRow{}
	for rows.Next() {
		var i ListJobRunsRow
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Status,
			&i.StartedAt,
			&i.FinishedAt,
			&i.ErrorMessage,
			&i.TriggeredBy,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobRun = `-- name: UpdateJobRun :exec
UPDATE job_runs
SET status = $2, started_at = $3, finished_at = $4, error_message = $5, triggered_by = $6, metadata = $7, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateJobRunParams struct {
	ID           pgtype.UUID      `json:"id"`
	Status       pgtype.Text      `json:"status"`
	StartedAt    pgtype.Timestamp `json:"started_at"`
	FinishedAt   pgtype.Timestamp `json:"finished_at"`
	ErrorMessage pgtype.Text      `json:"error_message"`
	TriggeredBy  pgtype.Text      `json:"triggered_by"`
	Metadata     []byte           `json:"metadata"`
}

func (q *Queries) UpdateJobRun(ctx context.Context, arg UpdateJobRunParams) error {
	_, err := q.db.Exec(ctx, updateJobRun,
		arg.ID,
		arg.Status,
		arg.StartedAt,
		arg.FinishedAt,
		arg.ErrorMessage,
		arg.TriggeredBy,
		arg.Metadata,
	)
	return err
}

const updateJobRunError = `-- name: UpdateJobRunError :exec
UPDATE job_runs
SET error_message = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateJobRunErrorParams struct {
	ID           pgtype.UUID `json:"id"`
	ErrorMessage pgtype.Text `json:"error_message"`
}

func (q *Queries) UpdateJobRunError(ctx context.Context, arg UpdateJobRunErrorParams) error {
	_, err := q.db.Exec(ctx, updateJobRunError, arg.ID, arg.ErrorMessage)
	return err
}

const updateJobRunStatus = `-- name: UpdateJobRunStatus :exec
UPDATE job_runs
SET status = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateJobRunStatusParams struct {
	ID     pgtype.UUID `json:"id"`
	Status pgtype.Text `json:"status"`
}

func (q *Queries) UpdateJobRunStatus(ctx context.Context, arg UpdateJobRunStatusParams) error {
	_, err := q.db.Exec(ctx, updateJobRunStatus, arg.ID, arg.Status)
	return err
}
