// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	dto "github.com/b0nbon1/stratal/db/dto"
	"github.com/jackc/pgx/v5/pgtype"
)

type JobStatus string

const (
	JobStatusPending   JobStatus = "pending"
	JobStatusRunning   JobStatus = "running"
	JobStatusFailed    JobStatus = "failed"
	JobStatusCompleted JobStatus = "completed"
)

func (e *JobStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JobStatus(s)
	case string:
		*e = JobStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for JobStatus: %T", src)
	}
	return nil
}

type NullJobStatus struct {
	JobStatus JobStatus `json:"job_status"`
	Valid     bool      `json:"valid"` // Valid is true if JobStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullJobStatus) Scan(value interface{}) error {
	if value == nil {
		ns.JobStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.JobStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullJobStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.JobStatus), nil
}

type Job struct {
	ID         pgtype.UUID          `json:"id"`
	Name       string               `json:"name"`
	Schedule   pgtype.Text          `json:"schedule"`
	Type       pgtype.Text          `json:"type"`
	Config     dto.AutomationConfig `json:"config"`
	Status     NullJobStatus        `json:"status"`
	Retries    pgtype.Int4          `json:"retries"`
	MaxRetries pgtype.Int4          `json:"max_retries"`
	CreatedAt  pgtype.Timestamptz   `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz   `json:"updated_at"`
	UserID     pgtype.Int4          `json:"user_id"`
}

type JobRun struct {
	ID        pgtype.UUID        `json:"id"`
	JobID     pgtype.UUID        `json:"job_id"`
	Status    NullJobStatus      `json:"status"`
	Logs      pgtype.Text        `json:"logs"`
	StartedAt pgtype.Timestamptz `json:"started_at"`
	EndedAt   pgtype.Timestamptz `json:"ended_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type User struct {
	ID           int32            `json:"id"`
	Username     string           `json:"username"`
	Email        string           `json:"email"`
	PasswordHash string           `json:"password_hash"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}
