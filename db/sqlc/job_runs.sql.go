// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job_runs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJobRun = `-- name: CreateJobRun :one
INSERT INTO job_runs (
  job_id,
  status,
  logs,
  started_at,
  ended_at
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, job_id, status, logs, started_at, ended_at, created_at, updated_at
`

type CreateJobRunParams struct {
	JobID     pgtype.UUID        `json:"job_id"`
	Status    NullJobStatus      `json:"status"`
	Logs      pgtype.Text        `json:"logs"`
	StartedAt pgtype.Timestamptz `json:"started_at"`
	EndedAt   pgtype.Timestamptz `json:"ended_at"`
}

func (q *Queries) CreateJobRun(ctx context.Context, arg CreateJobRunParams) (JobRun, error) {
	row := q.db.QueryRow(ctx, createJobRun,
		arg.JobID,
		arg.Status,
		arg.Logs,
		arg.StartedAt,
		arg.EndedAt,
	)
	var i JobRun
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Status,
		&i.Logs,
		&i.StartedAt,
		&i.EndedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteJobRun = `-- name: DeleteJobRun :exec
DELETE FROM job_runs
WHERE id = $1
`

func (q *Queries) DeleteJobRun(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteJobRun, id)
	return err
}

const getJobRun = `-- name: GetJobRun :one
SELECT id, job_id, status, logs, started_at, ended_at, created_at, updated_at FROM job_runs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetJobRun(ctx context.Context, id pgtype.UUID) (JobRun, error) {
	row := q.db.QueryRow(ctx, getJobRun, id)
	var i JobRun
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Status,
		&i.Logs,
		&i.StartedAt,
		&i.EndedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listJobRun = `-- name: ListJobRun :many
SELECT id, job_id, status, logs, started_at, ended_at, created_at, updated_at FROM job_runs
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListJobRunParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListJobRun(ctx context.Context, arg ListJobRunParams) ([]JobRun, error) {
	rows, err := q.db.Query(ctx, listJobRun, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobRun{}
	for rows.Next() {
		var i JobRun
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.Status,
			&i.Logs,
			&i.StartedAt,
			&i.EndedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobRun = `-- name: UpdateJobRun :one
UPDATE job_runs
SET
  status = $1,
  logs = $2,
  ended_at = $3
WHERE id = $4
RETURNING id, job_id, status, logs, started_at, ended_at, created_at, updated_at
`

type UpdateJobRunParams struct {
	Status  NullJobStatus      `json:"status"`
	Logs    pgtype.Text        `json:"logs"`
	EndedAt pgtype.Timestamptz `json:"ended_at"`
	ID      pgtype.UUID        `json:"id"`
}

func (q *Queries) UpdateJobRun(ctx context.Context, arg UpdateJobRunParams) (JobRun, error) {
	row := q.db.QueryRow(ctx, updateJobRun,
		arg.Status,
		arg.Logs,
		arg.EndedAt,
		arg.ID,
	)
	var i JobRun
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.Status,
		&i.Logs,
		&i.StartedAt,
		&i.EndedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
