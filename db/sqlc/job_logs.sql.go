// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job_logs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJobLog = `-- name: CreateJobLog :one
INSERT INTO job_logs (
  job_id,
  log_level,
  message
) VALUES (
  $1,
  $2,
  $3
) RETURNING id, job_id, log_level, message, created_at, updated_at
`

type CreateJobLogParams struct {
	JobID    pgtype.UUID `json:"job_id"`
	LogLevel string      `json:"log_level"`
	Message  string      `json:"message"`
}

func (q *Queries) CreateJobLog(ctx context.Context, arg CreateJobLogParams) (JobLog, error) {
	row := q.db.QueryRow(ctx, createJobLog, arg.JobID, arg.LogLevel, arg.Message)
	var i JobLog
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.LogLevel,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getJobLog = `-- name: GetJobLog :one
SELECT id, job_id, log_level, message, created_at, updated_at FROM job_logs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetJobLog(ctx context.Context, id int32) (JobLog, error) {
	row := q.db.QueryRow(ctx, getJobLog, id)
	var i JobLog
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.LogLevel,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLogsByJob = `-- name: GetLogsByJob :many
SELECT id, job_id, log_level, message, created_at, updated_at FROM job_logs
WHERE job_id = $1
`

func (q *Queries) GetLogsByJob(ctx context.Context, jobID pgtype.UUID) ([]JobLog, error) {
	rows, err := q.db.Query(ctx, getLogsByJob, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobLog{}
	for rows.Next() {
		var i JobLog
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.LogLevel,
			&i.Message,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobLogs = `-- name: ListJobLogs :many
SELECT id, name, schedule, type, config, status, retries, max_retries, created_at, updated_at, user_id FROM jobs
ORDER BY id DESC
LIMIT $1
OFFSET $2
`

type ListJobLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListJobLogs(ctx context.Context, arg ListJobLogsParams) ([]Job, error) {
	rows, err := q.db.Query(ctx, listJobLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Job{}
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Schedule,
			&i.Type,
			&i.Config,
			&i.Status,
			&i.Retries,
			&i.MaxRetries,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
